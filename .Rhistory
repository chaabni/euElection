colnames(attendance)[2]  <- "att"
colnames(attendance)[3]  <- "age"
attendance$age[attendance$age > 23] <- NA
attendance$att[attendance$att > 2] <- NA
attendance$att <- as.factor(attendance$att)
attendance$aage <- as.factor(attendance$age)
all.prop <- data.frame(prop.table(table(age=attendance$age, att=attendance$att),1))
aa <- ggplot(all.prop, aes(x=age, y=Freq)) + geom_line(aes(group=att, colour=att)) +
scale_y_continuous("Percentage", breaks=c(0, 0.2, 0.4, 0.6, 0.8), labels=c("0%","20%","40%","60%","80%"))
aa + scale_colour_discrete(name="School attendance",
breaks=c(0,1),
labels=c("No", "Yes"))
ggplot(employment.prop, aes(x=v1, y=Freq, fill = sex)) + geom_bar(position=position_dodge(), stat="identity") +
scale_y_continuous("Percentage", breaks=c(0,0.2,0.4,0.6), labels=c("0%","20%","40%","60%")) +
scale_fill_hue(name="Sex of Respondent") +
scale_x_discrete("Employment (all year or seasonal)", breaks=c(1, 2, 3), labels =c("All year", "Seasonal", "Occasional"))
ggplot(violence.prop, aes(x=violence, y=Freq, fill = sex)) + geom_bar(position=position_dodge(), stat="identity") +
scale_y_continuous("Percentage", breaks=c(0,0.2,0.4,0.6), labels=c("0%","20%","40%","60%")) +
scale_fill_hue(name="Sex of Household Head")
aa <- ggplot(all.prop, aes(x=age, y=Freq)) + geom_line(aes(group=att, colour=att)) +
scale_y_continuous("Percentage", breaks=c(0, 0.2, 0.4, 0.6, 0.8), labels=c("0%","20%","40%","60%","80%"))
aa + scale_colour_discrete(name="School attendance",
breaks=c(0,1),
labels=c("No", "Yes"))
ows=c(0.5349338, 0.4650271, 0.5521523, 0.5319551, 0.4724068, 0.5353726, 0.5668109, 0.551002, 0.4289264, 0.4858385, 0.5315429, 0.54723, 0.6131176)
erdos = c(0.09065251, 0.05244545, 0.1150044, 0.08330179, 0.05441713, 0.09310034, 0.1157021, 0.08176856, 0.04771311, 0.06977913, 0.08147016, 0.08325265, 0.1392388)
ows.df <- as.data.frame(cbind(erdos,ows))
View(ows.df)
week <- c(1:13)
ows.df <- as.data.frame(cbind(erdos,ows,week))
ggplot(ows.df, aes(week, ows)) + geom_line()
ggplot(ows.df, aes(week, ows)) + geom_line() + geom_line(week,erdos,ows.df)
?geom_line
ggplot(ows.df, aes(week, ows)) + geom_line() + geom_line(erdos)
ggplot(ows.df, aes(week, ows)) + geom_line() + geom_line(aes(erdos))
View(ows.df)
ows <- as.data.frame(ows)
ows$model <- "observed"
erdos <- as.data.frame(erdos)
erdos$model <- "erdos"
colnames(erdos)[1] <- "constraint"
colnames(ows)[1] <- "constraint"
ows
ows$week <- c(1:13)
erdos$week <- c(1:13)
ows.df <- as.data.frame(rbind(ows,erdos))
ows.df
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line()
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line() + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_path() + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_point() + geom_path() + scale_x_continuous("Week", breaks=c(1:13))
?geom_line
?linetype
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_point() + geom_line(linetype=2) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(linetype=2) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line() + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(alpha=1) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(alpha=10) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(alpha=3) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(alpha=.5) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(alpha=.1) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(alpha=1) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(size=1) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(size=constraint) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(size=ows.df$constraint) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line(size=ows.df$week) + scale_x_continuous("Week", breaks=c(1:13))
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line() + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar()
ggplot(ows.df, aes(week, constraint, colour=model)) + geom_line() + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity")
ggplot(ows.df, aes(week, constraint, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity", position="dodge") + geom_line()
ggplot(ows.df, aes(week, constraint, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity", position="dodge", fill=model) + geom_line()
ggplot(ows.df, aes(week, constraint, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity", position="dodge", fill=ows.df$model) + geom_line()
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity", position="dodge") + geom_line()
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity") + geom_line()
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity") + geom_line(colour="black")
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity") + geom_line(colour="grey")
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity") + geom_line(colour="darkblue")
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity", position="dodge") + geom_line(colour="darkblue")
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_bar(stat="identity", position="dodge") + geom_line(colour="darkblue")+geom_point()
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_line() + geom_point()
ggplot(ows.df, aes(week, constraint, fill=model, colour=model)) + scale_x_continuous("Week", breaks=c(1:13)) + geom_line()
install.packages("austin", repos="http://r-forge.r-project.org")
install.packages("austin", repos="http://r-forge.r-project.org", type="source")
?austin
??AUSTIN
c_ows <- read.csv(c_ows, file="~/Dropbox/UCL/PhD/APR paper/ows_final.csv")
c_ows <- read.csv(file="~/Dropbox/UCL/PhD/APR paper/ows_final.csv")
library(ggplot2)
library(scales)
ows.plot1 <- ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ows.plot2 <- ggplot(c_ows, aes(week,trans, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("Local Clustering Coefficient - OWS")
c_cif <- read.csv(file="~/Dropbox/UCL/PhD/APR paper/cif_final.csv")
cif.plot1 <- ggplot(c_cif, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:22)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - IF")
cif.plot2 <- ggplot(c_cif, aes(week,trans, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:22)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("Local Clustering Coefficient - IF")
c_chile <- read.csv( file="~/Dropbox/UCL/PhD/APR paper/chile_final.csv")
chile.plot1 <- ggplot(c_chile, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:7)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - 2013 Chilean Elections")
chile.plot2 <- ggplot(c_chile, aes(week,trans, group=type, colour=type)) + geom_smooth(span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:7)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("Local Clustering Coefficient - 2013 Chilean Elections")
ows.plot1
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=1) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.7) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
library(gridExtra)
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
?geom_smooth
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, ) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=.5) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=.1) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=.95) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, spam=0.5) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, spam=0.1) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.1) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("Network Constraint - OWS")
ows.plot1
chile.plot1
cif.plot1
chile.plot2
chile.plot2 <- ggplot(c_chile, aes(week,trans, group=type, colour=type)) + geom_smooth(se=F,span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:7)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("Local Clustering Coefficient - 2013 Chilean Elections")
chile.plot2
chile.plot2 <- ggplot(c_chile, aes(week,trans, group=type, colour=type)) + geom_smooth(se=F,span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:7)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("2013 Chilean Elections")
chile.plot1 <- ggplot(c_chile, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:7)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("2013 Chilean Elections")
cif.plot2 <- ggplot(c_cif, aes(week,trans, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:22)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("IF")
cif.plot1 <- ggplot(c_cif, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:22)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("IF")
ows.plot2 <- ggplot(c_ows, aes(week,trans, group=type, colour=type)) + geom_smooth(se=F, span=0.5) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Local Clustering Coefficient") +
scale_color_hue("Type of Network") +
ggtitle("OWS")
ows.plot1 <- ggplot(c_ows, aes(week,constraint, group=type, colour=type)) + geom_smooth(se=F, span=0.5 ) +
geom_point() +
scale_x_discrete("Weeks", breaks=c(1:13)) +
scale_y_continuous("Average Network Constraint") +
scale_color_hue("Type of Network") +
ggtitle("OWS")
ows.plot1
ows.plot2
cif.plot1
cif.plot2
chile.plot1
chile.plot2
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "DyLMgbXMsoitmECztMv9yQ"
consumerSecret <- "71VzOyJmaIxzkt7yGSE33Us0Qz8BqupEBsBYUWFnnKo"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
?my_oauth
?OAuthFactory
consumerKey <- "hwI6C1zzltZT7Lc6HSHuHg"
consumerSecret <- "XE5L65XhZs5kCdjY0Y4NxZ41pkvfn8GSuBFHaxo9ZUY"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumerKey <- "hwI6C1zzltZT7Lc6HSHuHg"
consumerSecret <- "XE5L65XhZs5kCdjY0Y4NxZ41pkvfn8GSuBFHaxo9ZUY"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumerKey <- "hwI6C1zzltZT7Lc6HSHuHg"
consumerSecret <- "XE5L65XhZs5kCdjY0Y4NxZ41pkvfn8GSuBFHaxo9ZUY"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumerKey <- "PYqqPd0hGN0sOgDpdk2hA"
consumerSecret <- "NecHp104gdEVWsuQRqjrA4IH3CVhYVRBpDx1tsSNhVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
install.packages("streamR")
install.packages("ROAuth")
install.packages("ROAuth")
install.packages("ROAuth")
install.packages("ROAuth")
install.packages("ROAuth")
install.packages("ROAuth")
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "PYqqPd0hGN0sOgDpdk2hA"
consumerSecret <- "NecHp104gdEVWsuQRqjrA4IH3CVhYVRBpDx1tsSNhVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
ggplot(map.data) + geom_map(map = map.data, fill = "white",
color = "grey20", size = 0.25) + expand_limits(x = map.data$long, y = map.data$lat) +
theme(axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),
axis.title = element_blank(), panel.background = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), plot.background = element_blank(),
plot.margin = unit(0 * c(-1.5, -1.5, -1.5, -1.5), "lines")) + geom_point(data = points,
aes(x = x, y = y), size = 2, alpha = 1/5, color = "red")
library(ggplot2)
library(mapdata)
librarry(grid)
library(grid)
ggplot(map.data) + geom_map(map = map.data, fill = "white",
color = "grey20", size = 0.25) + expand_limits(x = map.data$long, y = map.data$lat) +
theme(axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),
axis.title = element_blank(), panel.background = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), plot.background = element_blank(),
plot.margin = unit(0 * c(-1.5, -1.5, -1.5, -1.5), "lines")) + geom_point(data = points,
aes(x = x, y = y), size = 2, alpha = 1/5, color = "red")
str(day1)
library(euElection)
classifier
sentiment <- read.table(header=T, text='
Day Positive Negative Leader
2014-05-15 23 28 Cameron
2014-05-15 26 25 Clegg
2014-05-15 23 23 Miliband
2014-05-15 16 20 Farage
2014-05-16 21 13 Cameron
2014-05-16 33 13 Clegg
2014-05-16 23 30 Miliband
2014-05-16 27 20 Farage
2014-05-17 18 7 Cameron
2014-05-17 30 14 Clegg
2014-05-17 31 19 Miliband
2014-05-17 28 23 Farage
2014-05-18 24 9 Cameron
2014-05-18 32 20 Clegg
2014-05-18 29 25 Miliband
2014-05-18 22 27 Farage
2014-05-19 27 12 Cameron
2014-05-19 20 26 Clegg
2014-05-19 32 26 Miliband
2014-05-19 21 28 Farage
')
sentiment$Day <- as.Date(sentiment$Day)
pos <- qplot(Day,Positive,data=sentiment, color=Leader, geom="smooth") + geom_point()
neg <- qplot(Day,Negative,data=sentiment, color=Leader, geom="smooth") + geom_point()
grid.arrange(pos, neg, nrow=2)
library(streamR)
library(ggplot2)
library(reshape)
library(scales)
library(grid)
library(gridExtra)
sentiment$Day <- as.Date(sentiment$Day)
pos <- qplot(Day,Positive,data=sentiment, color=Leader, geom="smooth") + geom_point()
neg <- qplot(Day,Negative,data=sentiment, color=Leader, geom="smooth") + geom_point()
grid.arrange(pos, neg, nrow=2)
setwd("~/Dropbox/UCL/PhD/EU_elections")
farage <- read.csv("farage_1.csv")
lexicon <- read.csv("https://raw.githubusercontent.com/jsajuria/euElection/lexicon.csv", stringsAsFactors = F)
lexicon <- read.csv(lexicon.csv, stringsAsFactors = F)
lexicon <- read.csv('lexicon.csv', stringsAsFactors = F)
pos.words <- lexicon$word[lexicon$polarity == "positive"]
neg.words <- lexicon$word[lexicon$polarity == "negative"]
View(farage)
colnames(farage)[6] <- "text"
View(farage)
classifier(farage, pos.words, neg.words, keyword="farage")
farage$text  <- as.character(farage$text)
classifier(farage, pos.words, neg.words, keyword="farage")
install_github('euElection', 'jsajuria')
library('devtools')
install_github('euElection', 'jsajuria')
classifier(farage, pos.words, neg.words, keyword="farage")
clean.tweets <- function(text) {
# loading required packages
lapply(c("tm", "Rstem", "stringr"), require, c = T, q = T)
words <- removePunctuation(text)
words <- stemDocument(words)
# spliting in words
words <- str_split(text, " ")
return(words)
}
library(tm)
?stemDocument
install_github('euElection', 'jsajuria')
classifier(farage, pos.words, neg.words, keyword="farage")
install_github('euElection', 'jsajuria')
classifier(farage, pos.words, neg.words, keyword="farage")
classifier <- function(tweets, pos.words, neg.words, keyword) {
# subsetting tweets that contain the keyword
relevant <- grep(keyword, tweets$text, ignore.case = TRUE)
# preparing tweets for analysis
clean.tweets <- function(text) {
# loading required packages
lapply(c("tm", "Rstem", "stringr"), require, c = T, q = T)
words <- removePunctuation(text)
words <- stemDocument(words)
# spliting in words
words <- str_split(text, " ")
return(words)
}
words <- clean.tweets(tweets$text[relevant])
# classifier
classify <- function(words, pos.words, neg.words) {
# count number of positive and negative word matches
pos.matches <- sum(words %in% pos.words)
neg.matches <- sum(words %in% neg.words)
return(pos.matches - neg.matches)
}
scores <- unlist(lapply(words, classify, pos.words, neg.words))
n <- length(scores)
positive <- as.integer(length(which(scores > 0))/n * 100)
negative <- as.integer(length(which(scores < 0))/n * 100)
neutral <- 100 - positive - negative
cat(n, "tweets about", keyword, ":", positive, "% positive,", negative,
"% negative,", neutral, "% neutral")
}
classifier(farage, pos.words, neg.words, keyword="farage")
classifier <- function(tweets, pos.words, neg.words, keyword) {
# subsetting tweets that contain the keyword
relevant <- grep(keyword, tweets$text, ignore.case = TRUE)
# preparing tweets for analysis
words <- clean.tweets(tweets$text[relevant])
# classifier
scores <- unlist(lapply(words, classify, pos.words, neg.words))
n <- length(scores)
positive <- as.integer(length(which(scores > 0))/n * 100)
negative <- as.integer(length(which(scores < 0))/n * 100)
neutral <- 100 - positive - negative
cat(n, "tweets about", keyword, ":", positive, "% positive,", negative,
"% negative,", neutral, "% neutral")
}
classify <- function(words, pos.words, neg.words) {
# count number of positive and negative word matches
pos.matches <- sum(words %in% pos.words)
neg.matches <- sum(words %in% neg.words)
return(pos.matches - neg.matches)
}
clean.tweets <- function(text) {
# loading required packages
lapply(c("tm", "Rstem", "stringr"), require, c = T, q = T)
words <- removePunctuation(text)
words <- wordStem(words)
# spliting in words
words <- str_split(text, " ")
return(words)
}
clean.tweets <- function(text) {
# loading required packages
lapply(c("tm", "Rstem", "stringr"), require, c = T, q = T)
words <- removePunctuation(text)
words <- stemDocument(words)
# spliting in words
words <- str_split(text, " ")
return(words)
}
classifier(farage, pos.words, neg.words, keyword="farage")
install_github('euElection', 'jsajuria')
install_github('euElection', 'jsajuria')
document()
cd package
setwd("./package")
cd package
document()
setwd("./euElection")
document()
install_github('euElection', 'jsajuria')
install_github('euElection', 'jsajuria')
document()
document()
install_github('euElection', 'jsajuria')
install_github('euElection', 'jsajuria')
?euElection
install.packages("rstudioapi")
?euElection
install_github('euElection', 'jsajuria')
classifier <- function(tweets, pos.words, neg.words, keyword) {
# subsetting tweets that contain the keyword
relevant <- grep(keyword, tweets$text, ignore.case = TRUE)
# preparing tweets for analysis
clean_tweets <- function(text) {
# loading required packages
lapply(c("tm", "Rstem", "stringr"), require, c = T, q = T)
words <- removePunctuation(text)
words <- stemDocument(words)
# spliting in words
words <- str_split(text, " ")
return(words)
}
words <- clean_tweets(tweets$text[relevant])
# classifier
classify <- function(words, pos.words, neg.words) {
# count number of positive and negative word matches
pos.matches <- sum(words %in% pos.words)
neg.matches <- sum(words %in% neg.words)
return(pos.matches - neg.matches)
}
scores <- unlist(lapply(words, classify, pos.words, neg.words))
n <- length(scores)
positive <- as.integer(length(which(scores > 0))/n * 100)
negative <- as.integer(length(which(scores < 0))/n * 100)
neutral <- 100 - positive - negative
cat(n, "tweets about", keyword, ":", positive, "% positive,", negative,
"% negative,", neutral, "% neutral")
}
classifier(farage, pos.words, neg.words, "farage")
install_github('euElection', 'jsajuria')
library(twitteR)
?twitteR
library(twitteR)
?twitteR
?>twitteR
??twitteR
